#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/Range.h"
#include "std_msgs/Int16.h"
#include "std_msgs/Int64.h"
#include "std_msgs/Float64.h"
#include <iostream>
//#include "math.h"
#include <cmath>
#include <stdlib.h>

///////////OPENCV///////////
#define _USE_MATH_DEFINES
//#include <cmath>
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <stdio.h>
#define inDataSize 256
//#include <iostream>
#define MAXIMUM_TEXT_SIZE 64u
#include <math.h>       /* atan2 */
#define input "video"
#define show false

#define minPix 20 //minimum pixel size
#define minDist 15 //distance in inches to stop/go

using namespace std; 								//Dock is W 10ft x  L 8ft 

int US1 = 0; 
int US2 = 0;
int US3 = 0; 
int US4 = 0;
int LD1 = 0;
int LD2 = 0;

double Lat1 = 0;						//this is the current location Latitude from the GPS
double Lon1 = 0;						//this is the current location Longitude from the GPS
double Heading = 0;						//this is the current location Heading from the GPS
double FLat = 0;
double FLon = 0;
double BLat = 0;
double BLon = 0;

double R = 6371; //km "Earths Radius"				Need to check if this will work
double FH = 0;					//Final Heading from the bearing formula
double dist = 0; 				//Distance from the Distance formula

double NaviNodes[5000][2];//Nodes that were used for navigation
double Bnodes[600][2];//nodes for buoys

int distanceArr[190];
int currdist;
int currangle;
int lastdist;

int tbear = 0;
double lonx;
double laty;
int currObjCount = 0;   //current object/obstacle count

int idealspeed=0;
double setHeading = 0; 

bool StartUp = true;
bool SpeedGate = false;
bool ObAvoid = false;
bool AutoDock = false;
bool EndRun = false; 
bool frontisClear = true;


std_msgs::String str_msg;


void UsCallback (const sensor_msgs::Range::ConstPtr& msg) 
{
    US1 = msg->range; 
}

void UsCallback1 (const sensor_msgs::Range::ConstPtr& msg1) 
{
    US2 = msg1->range; 
}

void UsCallback2 (const sensor_msgs::Range::ConstPtr& msg2) 
{
    US3 = msg2->range; 
}

void UsCallback3 (const sensor_msgs::Range::ConstPtr& msg3) 
{
    US4 = msg3->range; 
}

void LdCallBack (const sensor_msgs::Range::ConstPtr& msg4) 
{
    LD1 = msg4->range; 
    LD2 = msg4->field_of_view;
}

void GPSCallBack (const std_msgs::Int64::ConstPtr& msg5)
{

    Lat1 = msg5->data * pow(10, -7); //range might be needed to change to gps
// it is being multiplied by 10^-7 because in the gps.ino file, it is being outputted as a LONG value to avoid truncation
}
void GPSCallBack1 (const std_msgs::Int64::ConstPtr& msg6)
{

    Lon1 = msg6->data * pow(10, -7); //range might be needed to change to gps  
// it is being multiplied by 10^-7 because in the gps.ino file, it is being outputted as a LONG value(without decimal) to avoid truncation
}

void GPSCallBack2 (const std_msgs::Float64::ConstPtr& msg7)
{
    Heading = msg7->data;
}

double DegtoRad (double Deg)						//This converts degrees to Radians
{
    double radians = 0;
    double pi = atan(1)*4;

    radians = Deg * (pi / 180);
    
    return radians;
}

//LD1 is distance to an object
//LD2 is current lidar angle
//-----------------------------------------Lidar methods---------------------------------------------------


void BDtoDist(int bear, int dist, double Lit1, double Lin1, int bearb)   //Takes a bearing and a distance and using current position, finds the corresponding GPS point
{
	tbear=bear-90;
	tbear=tbear+bearb;
	if(tbear>=0 && tbear<=90) 
	{
		lonx=Lin1+dist*cos(tbear);
		laty=Lit1+dist*sin(tbear);
	}

	if(tbear>90 && tbear<=180) 
	{	
		lonx=Lin1-dist*cos(tbear);
		laty=Lit1+dist*sin(tbear);
	}

	if(tbear>180 && tbear<270) 
	{
		lonx=Lin1-dist*cos(tbear);
		laty=Lit1-dist*sin(tbear);
	}

	if(tbear>=270 && tbear<360) 
	{
		lonx=Lin1+dist*cos(tbear);
		laty=Lit1-dist*sin(tbear);
	}


}

double findObstacle(int LD1, int LD2)
{
	currdist=LD1;
	currangle=LD2;
	if(currdist<(lastdist+10))
	{
		distanceArr[currangle]=currdist;
		BDtoDist(currangle,currdist,Lat1,Lon1,Heading);

 		cout << "Buoy detected!!!: " << currdist << "@"<< currangle<<"degrees"<< endl;

		Bnodes[currObjCount][0]=lonx;
		Bnodes[currObjCount][1]=laty;
		currObjCount++;
	}

 lastdist=currdist;
}


//------------------------------------------Navi Methods----------------------------------------------------
double Distance (double Lat1, double Lon1, double Lat2, double Lon2)	//Takes two coordinates and determines distance between those two points
{
    double a = 0;
    double c = 0;
    double R = 0;
    double dLat = 0;
    double dLon = 0;

    dLat = Lat2 - Lat1;
    dLon = Lon2 - Lon1;

    dLat = DegtoRad(dLat);
    dLon = DegtoRad(dLon);

    Lat1 = DegtoRad(Lat1);
    Lat2 = DegtoRad(Lat2);

    a = pow(sin(dLat / 2), 2) + cos(Lat1) * cos(Lat2) * pow(sin(dLon / 2), 2);
    
    c = 2 * atan2 (sqrt(a), sqrt(1 - a));
    
    R = 6371;    //km

    dist = R * c;

    dist = dist * 3280.8399;
    
    return dist;
}

double Buffer (double Lat1, double Lon1, double FH)						//This will give us the actual loc to try to reach with a buffer of 24inches from the given loc. Takes where we are, the bearing we need to reach the point we want to get too and the distance that we calculated we need to travel - the buffer distance to find the actual loc we want to try to reach. 
{
	double D = 24; //inches
	double BH = 0; 
	
	D = dist - D; 														//Take the distance from the distance formula minus the buffer dist
	
	BH = FH;
	
/*	if (FH <= 180)
	{
		BH = FH + 180;
	}	
	else
	{
		BH = FH - 180; 						   
	}
*/	
	Lat1 = DegtoRad(Lat1);
	Lon1 = DegtoRad(Lon1);
	
	BLat = asin(sin(Lat1) * cos(D/R) + cos(Lat1) * sin(D/R) * cos(BH));
	
	BLon = Lon1 + atan2(sin(BH) * sin(D/R) * cos(Lat1), cos(D/R) - sin(Lat1) * sin(BLat));
	
	return 0;
}


double Bearing (double Lat1, double Lon1, double Lat2, double Lon2)		//Takes two points and determines the bearing needed to reach the end point
{
    double dLon = 0;
    
    dLon = Lon2 - Lon1;
   
    double B1 = sin(dLon) * cos(Lat2); 
    double B2 = cos(Lat1) * sin((sin(Lat2) - sin(Lat1))) * cos(Lat2) * cos(dLon);
    double Fhead = atan2 (B1, B2);

    FH = fmod(Fhead + 360, 360);
    FH = fmod(FH + 180, 360);
  
    return FH;
}

double Rotate (double angle, int Lmsg, int Rmsg)
{
	double Lspeed = (1500)+(400 * 40 * pow(10, -2));
	double Rspeed = (1500)+(400 * -20 * pow(10, -2));
	if ( Heading <= angle+2 || Heading >= angle-2 )
	{ 
		Lmsg = Lspeed;
		Rmsg = Rspeed;
		
	}
}
		
		

double StartLoc (double Lat1, double Lon1, double Heading)						//This is the function to calculate the location we need to return to while at the dock
{
	double D = 36; //inches
	double R = 6371; //km 
	
	Lat1 = DegtoRad(Lat1);
	Lon1 = DegtoRad(Lon1);
	
	FLat = asin(sin(Lat1) * cos(D/R) + cos(Lat1) * sin(D/R) * cos(Heading));
	
	FLon = Lon1 + atan2(sin(Heading) * sin(D/R) * cos(Lat1), cos(D/R) - sin(Lat1) * sin(FLat));
	
	return 0;

}

double SetHeading()
{
	setHeading=Heading;
	return setHeading;
}

double SetHeading(double x)
{
	setHeading=x;
	return setHeading;
}


void GoForward(int x, int Lmsg, int Rmsg) //where x is a given motor pwm
{
double speed = (1500)+(400 * x * pow(10, -2));

	if(Heading==setHeading)
	{
	Lmsg = speed;
	Rmsg = speed;
	SetHeading();
	}

	else
	   {
		if(Heading<setHeading)		// if the boat is yawing to the left, right motor cuts speed
		{
		Lmsg = speed;
		Rmsg = speed-50;
		}

		if(Heading>setHeading)		// if the boat is yawing to the right, left motor cuts speed
		{
		Lmsg = speed-50;
		Rmsg = speed;
		}
	   }
}



/*bool FrontIsClear(int dist)
{
//if(  front sensor doesn't detect anything within dist distance) 
{return true;} Lon1 = (msg6->data)*
else
{return false;}

}
bool RightIsClear(int dist)
{
//if(  right sensor doesn't detect anything within dist distance) 
{return true;}
else
{return false;}

}
bool LeftIsClear(int dist)
{
//if(  left sensor doesn't detect anything within dist distance) 
{return true;}
else
{return false;}

}

/*double Stop()							//meant to bring the boat to a standstill
{xpos=lon1;
ypos=lan1;
while(lon1!=xpos && lan1!=ypos)
{
	if(lon1>xpos)
	{Lmsg.data=1400;
	}

} 
void Navigate(double x, double y)
{
	while((FrontIsClear(1)==true) && (RightIsClear(1)==true) && (LeftIsClear(1)==true))
	{
		GoTo(x,y);
	}

}
*/
///////////////////////////////////////////////OPENCV/////////////////////////////////////////////////////////////////////////
int counter = 0;


//struct to hold HSV values; makes coding cleaner and easier
struct colorStruct {
    std::string name; const char* tempName; //name holders
    int hLow; int hHigh; int sLow; int sHigh; int vLow; int vHigh;//color values
    cv::Scalar color;//color to display for this entity
    std::vector<cv::Point> contour; // Vector for storing contour if found
    int xEstimate;
    int yEstimate;
    float angle;
    float distance; //why not store it here; note: if error initialize under constructor
                    //constructor with given formal parameters; trust user to use this
    colorStruct(std::string Name, int Hlow, int Hhigh, int Slow, int Shigh, int Vlow, int Vhigh, cv::Scalar Color) {
        name = Name; hLow = Hlow; hHigh = Hhigh; sLow = Slow; sHigh = Shigh; vLow = Vlow; vHigh = Vhigh; color = Color; distance = -1.0;
    }
    //function to create a trackbar to adjust HSV
    void createTrackBar() {
        tempName = (name + " Trackbar").c_str();
        cvNamedWindow(tempName);
        //cvResizeWindow  (tempName, 350, 350);
        cvCreateTrackbar("H-Low", tempName, &hLow, 255, NULL);//these are the trackbars...
        cvCreateTrackbar("H-High", tempName, &hHigh, 255, NULL);
        cvCreateTrackbar("S-Low", tempName, &sLow, 255, NULL);
        cvCreateTrackbar("S-High", tempName, &sHigh, 255, NULL);
        cvCreateTrackbar("V-Low", tempName, &vLow, 255, NULL);
        cvCreateTrackbar("V-High", tempName, &vHigh, 255, NULL);
    }
}

//function to thresh image using HSV information from struct
//returns threshed image
cv::Mat threshHSV(cv::Mat img, colorStruct colorHSV) {
    cv::Mat imgThreshedHSV;
    cvtColor(img, imgThreshedHSV, cv::COLOR_BGR2HSV); //Convert the captured frame from BGR to HSV
                                                      //inputImage,scalar(hlow,slow,vlow),scalar(hhigh,shigh,vhigh),outputImage
    inRange(imgThreshedHSV, cv::Scalar(colorHSV.hLow, colorHSV.sLow, colorHSV.vLow),
        cv::Scalar(colorHSV.hHigh, colorHSV.sHigh, colorHSV.vHigh), imgThreshedHSV); //Threshold the image in range
                                                                                     //morphological opening (remove small objects from the foreground)
    erode(imgThreshedHSV, imgThreshedHSV, getStructuringElement(cv::MORPH_ELLIPSE, cv::Size(5, 5)));//<-kernel size
    dilate(imgThreshedHSV, imgThreshedHSV, getStructuringElement(cv::MORPH_ELLIPSE, cv::Size(5, 5)));
    //morphological closing (fill small holes in the foreground)
    dilate(imgThreshedHSV, imgThreshedHSV, getStructuringElement(cv::MORPH_ELLIPSE, cv::Size(5, 5)));
    erode(imgThreshedHSV, imgThreshedHSV, getStructuringElement(cv::MORPH_ELLIPSE, cv::Size(5, 5)));
    return imgThreshedHSV;
}

//find the max contour of the given color
std::vector<cv::Point> findMaxContour(cv::Mat img, cv::Mat imgThreshed, colorStruct& light) {
    std::vector< std::vector<cv::Point> > contours; // Vector for storing contour
    std::vector<cv::Point> blank;
    std::vector<cv::Vec4i> hierarchy;
    int largest_area = 0;
    int largest_contour_index = -1;
    cv::Rect bounding_rect;
    // Find the contours in the image
    cv::findContours(imgThreshed, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE);

    for (int i = 0; i< contours.size(); i++) { // iterate through each contour.
        double a = contourArea(contours[i], false);  //  Find the area of contour
        if (a>largest_area) {
            largest_area = a;
            largest_contour_index = i;                //Store the index of largest contour
        }
    }
    if (largest_contour_index>-1)
        return contours[largest_contour_index];//return largest contour
    else
        return blank;
}

//find block height/width or distance
float findDist(cv::Mat& img, colorStruct& light) {

    cv::Mat lookUpX = cv::imread("/home/oduasv/Desktop/Test1080/xEst.bmp");
    cv::Mat lookUpY = cv::imread("/home/oduasv/Desktop/Test1080/yEst.bmp");

    float distance = -1.0; //use as control
                           //get rectangle box in order to find width and height regardless of angle
    cv::RotatedRect box = minAreaRect(light.contour);
    cv::Point2f vtx[4];
    box.points(vtx);
    //width
    float x = sqrt(pow((vtx[1].x - vtx[0].x), 2) + pow((vtx[1].y - vtx[0].y), 2));
    //height
    float y = sqrt(pow((vtx[2].x - vtx[1].x), 2) + pow((vtx[2].y - vtx[1].y), 2));

    if(1){
        cv::Point2f center;
        float radius = 0;
        cv::minEnclosingCircle(light.contour, center, radius);
        //find distance
        // distKnown/radiusKnown=distance/radiusFound
        //->distance = radiusFound*distKnown/radiusKnown = radiusFound*ratioKnown

//***************************************
        distance = 2800 * pow(radius, -1.027); //OLD ONE
      

        cv::circle( img, center, 3, cv::Scalar(0,255,0), -1, 8, 0 );

        //draw circle around contour
        cv::circle(img, center, cvRound(radius), light.color, 1, CV_AA);

        int d = int(radius*2);
        int w = int(abs(center.x-960));
        if(d>=350){
            d=349;
        }
        if(w>=920){
            w=919;
        }
        int estimateX =int(lookUpX.at<uchar>(d,w,0));
        int estimateY =int(lookUpY.at<uchar>(d,w,0));

        if ((center.x -960)<0){
            light.xEstimate = -estimateX;
        } else{
            light.xEstimate = estimateX;
        }
        light.yEstimate = estimateY;
        distance = sqrt(estimateX*estimateX+estimateY*estimateY);
       

        //create string for output to image
        char text_array[MAXIMUM_TEXT_SIZE];
        snprintf(text_array, MAXIMUM_TEXT_SIZE, "%4.2f", estimateY);
        std::string temp(text_array);

        snprintf(text_array, MAXIMUM_TEXT_SIZE, "%4.2f", estimateX);
        std::string temp2(text_array);


    }

    if ((x + y) / 4>minPix)
        return distance;
    else
        return -1;
}

//find a sized contour; used for config
bool findSizedContour(cv::Mat& img, cv::Mat imgThreshed, colorStruct light) {
    std::vector< std::vector<cv::Point> > contours; // Vector for storing contour
    std::vector<cv::Vec4i> hierarchy;
    int largest_area = 0;
    int largest_contour_index = 0;
    cv::Rect rect;
    bool found = false;
    cv::findContours(imgThreshed, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE); // Find the contours in the image
    for (int i = 0; i< contours.size(); i++) { // iterate through each contour.
        rect = boundingRect(contours[i]);
        if (((rect.height + rect.width) / 4)>minPix) {
            cv::rectangle(img, rect, light.color, 2, 8, 0);
            int sizeofcontour = (rect.width + rect.height) / 2;
            if (show)
                std::cout << light.name << " size=" << sizeofcontour << std::endl;
            found = true;
        }
    }
    return found;
}

//function to find and classify lights and return 'w' or 's'
std::string classifyStopLight(cv::Mat img, std::vector<colorStruct>& lights) {
    cv::Mat threshedImg;
    std::string botCmd;

    for (int i = 0; i<lights.size(); i++) {

        threshedImg = threshHSV(img, lights[i]);
        if (show)
            imshow("Thresholded Image " + lights[i].name, threshedImg); //show the thresholded image
                                                                        //method contours
        lights[i].contour = findMaxContour(img, threshedImg, lights[i]);
        if (lights[i].contour.size()>0) {
            lights[i].distance = findDist(img, lights[i]);
            cv::imshow("Buoy Detection", img); //show the boxed image

            //////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////////////////////////////////////////////////////////////////////////////////////
            ///////////////////output
            double distanceEstimate =0;
            double angleEstimate = 0;
            if (lights[i].xEstimate!=0 && lights[i].yEstimate!=0){
                distanceEstimate = sqrt(lights[i].xEstimate*lights[i].xEstimate+lights[i].yEstimate*lights[i].yEstimate);
                angleEstimate = atan((double)(lights[i].xEstimate)/(double)(lights[i].yEstimate))*180.0/3.14159265;
                if(i==0){
                    std::cout<<"RED"<<std::endl;
                } else if (i==1){
                    std::cout<<"GREEN"<<std::endl;
                }
                std::cout<<"distance  => "<<distanceEstimate<<std::endl;
                std::cout<<"angle  => "<<angleEstimate<<std::endl;
             }
             /////////////////////////////////////////////////////////////////////////////////////////////////
             ////////////////////////////////////////////////////////////////////////////////////////////////


        }
    }

    if ((lights[0].distance>0) && (lights[0].distance<minDist)) {
        counter = counter + 1;

    }

    if (counter > 7)
    {
        counter = 0;
        return "s";
    }

    else if((lights[1].distance>0)&&(lights[1].distance<minDist)){

    }

    return botCmd;
}

//function to adjust colors
//keyboard "c" activates function
//keyboard "n" selects next color on loop
//keyboard "esc" exits config and goes back to main program
void configMode(std::vector< colorStruct>& lights, cv::VideoCapture cap)
{
    int key = 0; int i = 0; bool looped = false; cv::Mat img; cv::Mat tempImg;
    while (key != 27) {
        lights[i].createTrackBar();
        while (true) {
            if (input != "video")
                img = cv::imread(input);
            else
                cap.read(img);
            cv::imshow("Original Image", img);
            tempImg = threshHSV(img, lights[i]);
            cv::imshow("Threshed " + lights[i].name, tempImg);
            findSizedContour(img, tempImg, lights[i]);
            cv::imshow("Buoy Detection", img);
            key = cv::waitKey(1);
            if (key == 27) { //wait for 'esc' key press . If 'esc' key is pressed, break loop
                std::cout << "Exit config mode." << std::endl;
                cv::destroyAllWindows();
                break;
            }
            else if (key == 110) {
                // close the windows
                cv::destroyAllWindows();
                i++;
                if (i >= lights.size()) {
                    i = 0;
                }
                break;
            }
        }
    }
}


///////////////////////////////////////////////END////////////////////////////////////////////////////////////////////////////

int main(int argc, char **argv)
{

ros::init(argc, argv, "Navigation");		//Initializes the node Navigation
ros::NodeHandle nh;

//Sets up Subscriber to topic ultrasound sensors 
ros::Subscriber sub1 = nh.subscribe("ultrasound1", 100, UsCallback); 
ros::Subscriber sub2 = nh.subscribe("ultrasound2", 100, UsCallback1); 
ros::Subscriber sub3 = nh.subscribe("ultrasound3", 100, UsCallback2); 
ros::Subscriber sub4 = nh.subscribe("ultrasound4", 100, UsCallback3);

//Sets up Subscriber to topic Lidar 
ros::Subscriber sub5 = nh.subscribe("Lidar", 100, LdCallBack);    

//Sets up Subscriber to topic GPS 
ros::Subscriber sub6 = nh.subscribe("Latitude", 100, GPSCallBack); 
ros::Subscriber sub7 = nh.subscribe("Longitude", 100, GPSCallBack1);
ros::Subscriber sub8 = nh.subscribe("Heading", 100, GPSCallBack2);    
   
 
//Setup the Publishers from the Navigation Node to the Thrusters
ros::Publisher Lnav_pub = nh.advertise<std_msgs::Int16>("Left", 1000); 
ros::Publisher Rnav_pub = nh.advertise<std_msgs::Int16>("Right", 1000); 


ros::Rate loop_rate(1);


////////////////////////////////OPENCV//////////////////////////////////////////////////

    //create controls for keyboard use in while loop
    int key=0;
    cv::Mat img;//Setup image container
    cv::namedWindow("Original Image", CV_WINDOW_AUTOSIZE); //create a window

                                                           //create colorStruct vector to hold HSV colors
    std::vector< colorStruct > lights;

      //Red high level
      lights.push_back(colorStruct ("redhigh",165,255,146,255,98,255,cv::Scalar(0,0,255)));

    //Green
    lights.push_back(colorStruct("green", 37, 100, 100, 255, 77, 190, cv::Scalar(0, 255, 0)));



          //Setup video camera
        cv::VideoCapture cap(0); //capture the video from web cam
        if (!cap.isOpened()) {  // if not success, exit program
            std::cout << "Cannot open the web cam" << std::endl;
            return -1;//without webcam then useless->exit main
        }
        cap.set(3,1920);
        cap.set(4,1080);

        //define size of data
        int outDataSize = 1;
        //string to send command to bot
        std::string botCmd;


        //capture and detect until exit key
        while (true) {//could put key!=to some value here
                      //read a new frame from video
            if (!cap.read(img)) { //if not success, continue loop
                std::cout << "Cannot read a frame from video stream" << std::endl;
                continue;
            }
        
            imshow("Original Image", img); //show the original image
           botCmd = classifyStopLight(img, lights);//detect and return boxed lights with

                                                    //keyboard key use put here
            key = cv::waitKey(1);
            if (key == 27) { //wait for 'esc' key press . If 'esc' key is pressed, break loop
                std::cout << "esc key is pressed by user" << std::endl;
                break;
            }
            else if (key == 99) {
                std::cout << "Config Mode" << std::endl;
                configMode(lights, cap);
            }
          
        }


    return 0;
}

///////////////////////////////////END///////////////////////////////////////////////


while (ros::ok())
{
    std_msgs::Int16 Lmsg;					//Sets up the messages to be read to send to the thrusters
    std_msgs::Int16 Rmsg;

/*	
	if (StartUp == true)
	{
		//This is where we should send the start message to the Judges
		//Request the Obstacle Avoidance Location from Judges
		//Request the Docking Sequence Location from Judges

		StartUp = false;
		StartLoc(Lat1, Lon1, Heading);				  //Should take the current location when we start and save it
		
	}
	
	while(SpeedGate == false)
	{
		
		// Distance(Lat1, Lon1, Lat2, Lon2)
		// Bearing(Lat1, Lon1, Lat2, Lon2)
		// Head forward to get away from the dock so we  can rotate
		// Use camera and Lidar to find speedgates
		// Rotate Function to have the boat rotate to proper bearing
		// Buffer(Lat1, Lon1, Heading)
		//use position formula and computervision to find the middle of the speed gates
		while (frontisClear == true)
		{
			//Run Lidar
			//Run Camera
			//Run US
			//Check obstacle detection
			//Check distance to destination
			//Calculate thrust needed to reach destination
			//Go Forward for calculated time
		}
		if (ChallengeComplete == true)
		{
			Speedgate = true;
		}
	
	}
	ChallengeComplete = false;


	while(ObAvoid==false)
	{
		
		// Distance(Lat1, Lon1, GivenLat, GivenLon)
		// Bearing(Lat1, Lon1, Lat2, Lon2)
		// Head forward to get away from the dock so we  can rotate
		// Use camera and Lidar to find speedgates
		// Rotate Function to have the boat rotate to proper bearing
		// Buffer(Lat1, Lon1, Heading)
		//use position formula and computervision to find the middle of the speed gates
		while (frontisClear == true)
		{
			//Run Lidar
			//Run Camera
			//Run US
			//Check obstacle detection
			//Check distance to destination
			//Calculate thrust needed to reach destination
			//Go Forward for calculated time
		}
	
	}

	ObAvoid=true;
	
	while(AutoDock==false)
	{
		
		// Distance(Lat1, Lon1, GivenLat, GivenLon)
		// Bearing(Lat1, Lon1, Lat2, Lon2)
		// Head forward to get away from the dock so we  can rotate
		// Use camera and Lidar to find speedgates
		// Rotate Function to have the boat rotate to proper bearing
		// Buffer(Lat1, Lon1, Heading)
		//use position formula and computervision to find the middle of the speed gates
		while (frontisClear == true)
		{
			//Run Lidar
			//Run Camera
			//Run US
			//Check obstacle detection
			//Check distance to destination
			//Calculate thrust needed to reach destination
			//Go Forward for calculated time
		}
	
	}

	AutoDock=true;

	while(EndRun==false)
	{
		
		// Distance(Lat1, Lon1, FLat, FLon)
		// Bearing(Lat1, Lon1, FLat, FLon)
		// Rotate Function to have the boat rotate to proper bearing
		//use position formula and computervision to find the middle of the speed gates
		while (frontisClear == true)
		{
			//Run Lidar
			//Run Camera
			//Run US
			//Check obstacle detection
			//Check distance to destination
			//Calculate thrust needed to reach destination
			//Go Forward for calculated time
		}
	
	}

	EndRun=true;
	//This whe
	
	//This is where we should begin the HeartBeat as well
	
	
	
	cout << "Start Lat: " << FLat << endl;
	cout << "Start Lon: " << FLon << endl;
	
*/
	
	//This is where we should request the first obstacle as well
	
//*******ULTRA SONIC SENSORS*******
    cout << "ultrasonic 1: " << US1 << endl;			//Prints the values of the US Sensors to the Terminal
    cout << "ultrasonic 2: " << US2 << endl;
    cout << "ultrasonic 3: " << US3 << endl;
    cout << "ultrasonic 4: " << US4 << endl;


//******LIDAR*******

    cout << "lidar: " << LD1 << endl;				//Prints the Values of the Lidar to the Terminal 
    cout << "lidar2: " << LD2 << endl;	 

//******THRUSTERS******
    Lmsg.data = 1500;						//Sets the Values to publish to the thrusters
    Rmsg.data = 1500;
    
    Lnav_pub.publish(Lmsg);					//Publish the data to the left thruster
    Rnav_pub.publish(Rmsg);

    cout << "Left: " << Lmsg.data << endl;			//Prints the Left thruster value to the terminal
    cout << "Right: " << Rmsg.data << endl;			//Prints the Right thruster vlaue to the terminal
    cout << " "<< endl;


//******GPS*******
/*
    Lat1 = 36.8849239;
    Lon1 = -76.3050823;   
 */
    double Longitude = 0;
    double Latitude = 0; 
    double Heading = 0; 
    double Lat2 = 36.8849334;
    double Lon2 = -76.3051533;

    cout <<"lat1: "<<Lat1<<endl;
    cout <<"lon1: "<<Lon1<<endl;

    double Trav_Dist = Distance(Lat1, Lon1, Lat2, Lon2);
    
    cout << "Distance: " << Trav_Dist << endl;

    double Trav_Bearing = Bearing(Lat1, Lon1, Lat2, Lon2);
    
    cout << "Heading: " << Trav_Bearing << endl;

    cout << "Longitude: " << Longitude << endl;
    cout << "Latitude: " << Latitude << endl;
    cout << "Current Heading: " << Heading << endl;


    ros::spinOnce();
    loop_rate.sleep();
}

return 0;

}
